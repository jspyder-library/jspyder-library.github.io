Ext.data.JsonP.jspyder_dtype({"tagname":"class","name":"jspyder.dtype","autodetected":{},"files":[{"filename":"js-dtype.js","href":"js-dtype.html#jspyder-dtype"}],"owner":"jspyder","params":[{"tagname":"params","type":"Object","name":"obj","doc":"<p>The object against which all of the other operations will be run\n     against.</p>\n","html_type":"Object"},{"tagname":"params","type":"Function","name":"fn","optional":true,"doc":"<p>A callback function, which will be executed using the current\n     <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a> object as the context, and the object [obj] as its\n     first parameter.</p>\n","html_type":"Function"}],"members":[{"name":"this[\"int16\"]","tagname":"property","owner":"jspyder.dtype","id":"property-this[\"int16\"]","meta":{}},{"name":"this[\"int32\"]","tagname":"property","owner":"jspyder.dtype","id":"property-this[\"int32\"]","meta":{}},{"name":"this[\"int8\"]","tagname":"property","owner":"jspyder.dtype","id":"property-this[\"int8\"]","meta":{}},{"name":"this[\"uint16\"]","tagname":"property","owner":"jspyder.dtype","id":"property-this[\"uint16\"]","meta":{}},{"name":"this[\"uint32\"]","tagname":"property","owner":"jspyder.dtype","id":"property-this[\"uint32\"]","meta":{}},{"name":"this[\"uint8\"]","tagname":"property","owner":"jspyder.dtype","id":"property-this[\"uint8\"]","meta":{}},{"name":"_constError","tagname":"method","owner":"jspyder.dtype","id":"method-_constError","meta":{"private":true}},{"name":"_createBinding","tagname":"method","owner":"jspyder.dtype","id":"method-_createBinding","meta":{"private":true}},{"name":"_createInterface","tagname":"method","owner":"jspyder.dtype","id":"method-_createInterface","meta":{"private":true}},{"name":"_typeError","tagname":"method","owner":"jspyder.dtype","id":"method-_typeError","meta":{"private":true}},{"name":"bit","tagname":"method","owner":"jspyder.dtype","id":"method-bit","meta":{}},{"name":"bool","tagname":"method","owner":"jspyder.dtype","id":"method-bool","meta":{}},{"name":"byte","tagname":"method","owner":"jspyder.dtype","id":"method-byte","meta":{}},{"name":"currency","tagname":"method","owner":"jspyder.dtype","id":"method-currency","meta":{}},{"name":"double","tagname":"method","owner":"jspyder.dtype","id":"method-double","meta":{}},{"name":"enum","tagname":"method","owner":"jspyder.dtype","id":"method-enum","meta":{}},{"name":"fixed","tagname":"method","owner":"jspyder.dtype","id":"method-fixed","meta":{}},{"name":"float","tagname":"method","owner":"jspyder.dtype","id":"method-float","meta":{}},{"name":"int","tagname":"method","owner":"jspyder.dtype","id":"method-int","meta":{}},{"name":"short","tagname":"method","owner":"jspyder.dtype","id":"method-short","meta":{}},{"name":"string","tagname":"method","owner":"jspyder.dtype","id":"method-string","meta":{}},{"name":"ubyte","tagname":"method","owner":"jspyder.dtype","id":"method-ubyte","meta":{}},{"name":"uchar","tagname":"method","owner":"jspyder.dtype","id":"method-uchar","meta":{}},{"name":"ufixed","tagname":"method","owner":"jspyder.dtype","id":"method-ufixed","meta":{}},{"name":"uint","tagname":"method","owner":"jspyder.dtype","id":"method-uint","meta":{}},{"name":"ushort","tagname":"method","owner":"jspyder.dtype","id":"method-ushort","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-jspyder.dtype","short_doc":"Attaches strong-typed fields to javascript objects, which cannot be\nmutated from their initial data types (and can op...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/js-dtype.html#jspyder-dtype' target='_blank'>js-dtype.js</a></div></pre><div class='doc-contents'><p>Attaches strong-typed fields to javascript objects, which cannot be\nmutated from their initial data types (and can optionally be set\nas constant values, or throw errors when invalid data types are\napplied).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>The object against which all of the other operations will be run\n     against.</p>\n</div></li><li><span class='pre'>fn</span> : Function (optional)<div class='sub-desc'><p>A callback function, which will be executed using the current\n     <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a> object as the context, and the object [obj] as its\n     first parameter.</p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-this[\"int16\"]' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-property-this[\"int16\"]' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-property-this[\"int16\"]' class='name expandable'>this[\"int16\"]</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div><div id='property-this[\"int32\"]' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-property-this[\"int32\"]' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-property-this[\"int32\"]' class='name expandable'>this[\"int32\"]</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div><div id='property-this[\"int8\"]' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-property-this[\"int8\"]' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-property-this[\"int8\"]' class='name expandable'>this[\"int8\"]</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div><div id='property-this[\"uint16\"]' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-property-this[\"uint16\"]' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-property-this[\"uint16\"]' class='name expandable'>this[\"uint16\"]</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div><div id='property-this[\"uint32\"]' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-property-this[\"uint32\"]' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-property-this[\"uint32\"]' class='name expandable'>this[\"uint32\"]</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div><div id='property-this[\"uint8\"]' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-property-this[\"uint8\"]' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-property-this[\"uint8\"]' class='name expandable'>this[\"uint8\"]</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-_constError' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-_constError' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-_constError' class='name expandable'>_constError</a>( <span class='pre'>name, eType</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Returns a TypeError based on a template. ...</div><div class='long'><p>Returns a TypeError based on a template. Private function standardizes\nerror message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>Name assigned to the variable upon creation.</p>\n</div></li><li><span class='pre'>eType</span> : String<div class='sub-desc'><p>The expected data type.</p>\n</div></li></ul></div></div></div><div id='method-_createBinding' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-_createBinding' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-_createBinding' class='name expandable'>_createBinding</a>( <span class='pre'>obj, name, _interface</span> ) : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Binds the interface to the wrapped object. ...</div><div class='long'><p>Binds the interface to the wrapped object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>The object to bind to</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to bind the property under</p>\n</div></li><li><span class='pre'>_interface</span> : Object<div class='sub-desc'><p>The getter/setter property</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>obj parameter</p>\n</div></li></ul></div></div></div><div id='method-_createInterface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-_createInterface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-_createInterface' class='name expandable'>_createInterface</a>( <span class='pre'>_name, _jstype, _dtypeText, _dtype, _value, _constant, _strict, [_setFn], [_getFn], [_validateFn]</span> ) : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>_name</span> : String<div class='sub-desc'><p>Variable name</p>\n</div></li><li><span class='pre'>_jstype</span> : String<div class='sub-desc'><p>JavaScript type name</p>\n</div></li><li><span class='pre'>_dtypeText</span> : String<div class='sub-desc'><p>JS-DType type name</p>\n</div></li><li><span class='pre'>_dtype</span> : Function<div class='sub-desc'><p>JS-DType coercion function</p>\n</div></li><li><span class='pre'>_value</span> : Mixed<div class='sub-desc'><p>The initial value to use.</p>\n</div></li><li><span class='pre'>_constant</span> : Boolean<div class='sub-desc'><p>Whether the variable should be assignable after initialization.</p>\n</div></li><li><span class='pre'>_strict</span> : Boolean<div class='sub-desc'><p>Whether the variable should use the verification assignment function.</p>\n</div></li><li><span class='pre'>_setFn</span> : Function (optional)<div class='sub-desc'><p>Custom setter hook</p>\n</div></li><li><span class='pre'>_getFn</span> : Function (optional)<div class='sub-desc'><p>Custom getter hook</p>\n</div></li><li><span class='pre'>_validateFn</span> : Function (optional)<div class='sub-desc'><p>Custom validation hook for strict values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Property definition</p>\n</div></li></ul></div></div></div><div id='method-_typeError' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-_typeError' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-_typeError' class='name expandable'>_typeError</a>( <span class='pre'>name, val, eType</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Returns a TypeError based on a template. ...</div><div class='long'><p>Returns a TypeError based on a template. Private function standardizes\nerror message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>Name assigned to the variable upon creation.</p>\n</div></li><li><span class='pre'>val</span> : Mixed<div class='sub-desc'><p>The value being assigned to the variable.</p>\n</div></li><li><span class='pre'>eType</span> : String<div class='sub-desc'><p>The expected data type.</p>\n</div></li></ul></div></div></div><div id='method-bit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-bit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-bit' class='name expandable'>bit</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a bit to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches a bit to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .bit(\"lazy\", 1)\n     .bit(\"strict\", 1, true);\n\n o.lazy = \"1\" // = 1\n o.strict = \"1\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-bool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-bool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-bool' class='name expandable'>bool</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a boolean to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches a boolean to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .bool(\"lazy\", true)\n     .bool(\"strict\", true, true);\n\n o.lazy = 1 // = true\n o.strict = 1 // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-byte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-byte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-byte' class='name expandable'>byte</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a signed byte (-0x80-0x7f) to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches a signed byte (-0x80-0x7f) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .byte(\"lazy\", 5)\n     .byte(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-currency' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-currency' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-currency' class='name expandable'>currency</a>( <span class='pre'>name, value, [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a 2-decimal fixed-point number. ...</div><div class='long'><p>Creates a 2-decimal fixed-point number.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>value</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-double' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-double' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-double' class='name expandable'>double</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a double (Default JavaScript Number type) to object \"o\", with member name\n\"name\", with an initial value of \"...</div><div class='long'><p>Attaches a double (Default JavaScript Number type) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .double(\"lazy\", 5)\n     .double(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-enum' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-enum' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-enum' class='name expandable'>enum</a>( <span class='pre'>name, [value], [values], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches an enum interface to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches an enum interface to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .enum(\"lazy\", 1, [\"A\",\"B\",\"C\",\"D\"])\n     .enum(\"strict\", 1, [\"A\",\"B\",\"C\",\"D\"], true);\n\n o.lazy = 1 | 2 | 4 // o.lazy.A === true, o.lazy.B === true, o.lazy.C === true, o.lazy.D === false\n o.strict = \"1\" // TypeError\n\n o.lazy.A = true\n o.lazy.B = true\n o.lazy.C = false\n o.lazy.D = false\n\n o.lazy.valueOf() // 3\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>values</span> : Array|Object (optional)<div class='sub-desc'><p>The possible values which can be assigned under this enum value.</p>\n\n<pre><code> If an array is passed, then a list of enum values are generated\n automatically; this is sufficient for most uses if data is note\n stored between sessions.  \n\n If an object is passed, then the values from the object are used\n to generate the interface.  This method allows finer control over\n the available values, but does not ensure that each value is\n unique; duplicate or overlapping bit-flags can be provided.\n</code></pre>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-fixed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-fixed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-fixed' class='name expandable'>fixed</a>( <span class='pre'>name, [value], [decimals], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a signed fixed-point (-0x80000000-0x7FFFFFFF) to object \"o\", with member name\n\"name\", with an initial value ...</div><div class='long'><p>Attaches a signed fixed-point (-0x80000000-0x7FFFFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .fixed(\"lazy\", 5, 2)\n     .fixed(\"strict\", 5, 2, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n o.lazy = 0.123 // = 0.12\n o.lazy += 0.009 // = 0.12\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>decimals</span> : Number (optional)<div class='sub-desc'><p>The number of decimal points to use on this fixed point number.\n     Once set, this value cannot be changed; but any any decimal points\n     beyond this power of 10 will be truncated.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-float' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-float' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-float' class='name expandable'>float</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a floating point number to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches a floating point number to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .float(\"lazy\", 5)\n     .float(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-int' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-int' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-int' class='name expandable'>int</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a signed int (-0x800000000-0x7FFFFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"val...</div><div class='long'><p>Attaches a signed int (-0x800000000-0x7FFFFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .int(\"lazy\", 5)\n     .int(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-short' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-short' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-short' class='name expandable'>short</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a signed short (-0x8000-0x7FFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches a signed short (-0x8000-0x7FFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .short(\"lazy\", 5)\n     .short(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-string' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-string' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-string' class='name expandable'>string</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a strong typed string to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches a strong typed string to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .string(\"lazy\", \"5 + 5 = \")\n     .string(\"strict\", \"5 + 5 = \", true);\n\n o.lazy += \"10\" // = \"5 + 5 = \" + \"10\" = \"5 + 5 = 10\"\n o.strict += 10 // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>&quot;&quot;</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-ubyte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-ubyte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-ubyte' class='name expandable'>ubyte</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches an unsigned byte (0x00-0xFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches an unsigned byte (0x00-0xFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .ubyte(\"lazy\", 5)\n     .ubyte(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-uchar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-uchar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-uchar' class='name expandable'>uchar</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a strong-typed unsigned char type to the object. ...</div><div class='long'><p>Attaches a strong-typed unsigned char type to the object.  Of note,\nthis data type can take both numerical data (ushort) or character\ndata (single characters).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .fixed(\"lazy\", 5)\n     .fixed(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n o.lazy = 0.123 // = 0.12\n o.lazy += 0.009 // = 0.12\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-ufixed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-ufixed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-ufixed' class='name expandable'>ufixed</a>( <span class='pre'>name, [value], [decimals], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches a signed fixed-point (0x00000000-0xFFFFFFFF) to object \"o\", with member name\n\"name\", with an initial value o...</div><div class='long'><p>Attaches a signed fixed-point (0x00000000-0xFFFFFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .fixed(\"lazy\", 5, 2)\n     .fixed(\"strict\", 5, 2, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n o.lazy = 0.123 // = 0.12\n o.lazy += 0.009 // = 0.12\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>decimals</span> : Number (optional)<div class='sub-desc'><p>The number of decimal points to use on this fixed point number.\n     Once set, this value cannot be changed; but any any decimal points\n     beyond this power of 10 will be truncated.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-uint' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-uint' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-uint' class='name expandable'>uint</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches an unsigned int (0x00000000-0xFFFFFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"va...</div><div class='long'><p>Attaches an unsigned int (0x00000000-0xFFFFFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .uint(\"lazy\", 5)\n     .uint(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='method-ushort' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-ushort' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-ushort' class='name expandable'>ushort</a>( <span class='pre'>name, [value], [strict], [constant]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches an unsigned short (0x0000-0xFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><p>Attaches an unsigned short (0x0000-0xFFFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .short(\"lazy\", 5)\n     .short(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div></div></div></div></div>","meta":{}});